#+TITLE: Requirements Template v1.0
#+Author: TJ
#+Date: 2019.05.30
#+STARTUP: indent 

* Requirement Types

 [[https://www.guru99.com/functional-vs-non-functional-requirements.html#3][Requirement]]

** Functional
   - A functional requirement describes what a software system should do, while
     non-functional requirements place constraints on how the system will do so.

     An example of a functional requirement would be:

     A system must send an email whenever a certain condition is met (e.g. an
     order is placed, a customer signs up, etc).

   - What is a Functional Requirement? In software engineering, a functional
     requirement defines a system or its component. It describes the functions a
     software must perform. A function is nothing but inputs, its behavior, and
     outputs. It can be a calculation, data manipulation, business process, user
     interaction, or any other specific functionality which defines what function
     a system is likely to perform.

     Functional software requirements help you to capture the intended behavior
     of the system. This behavior may be expressed as functions, services or
     tasks or which system is required to perform.

   - Example Functional Requirements:
     - The software automatically validates customers against the ABC Contact
       Management System.
     - The Sales system should allow users to record customers sales.
     - The background color for all windows in the application will be blue and have a hexadecimal RGB color value of 0x0000FF.
     - Only Managerial level employees have the right to view revenue data.
     - The software system should be integrated with banking API.

** Non-functional
   - What is Non-Functional Requirement? A non-functional requirement defines the
     quality attribute of a software system. They represent a set of standards
     used to judge the specific operation of a system. Example, how fast does the
     website load?

     A non-functional requirement is essential to ensure the usability and
     effectiveness of the entire software system. Failing to meet non-functional
     requirements can result in systems that fail to satisfy user needs.

     Non-functional Requirements allows you to impose constraints or restrictions
     on the design of the system across the various agile backlogs. Example, the
     site should load in 3 seconds when the number of simultaneous users are
     > 10000. Description of non-functional requirements is just as critical as a
     functional requirement.

   - A related non-functional requirement for the system may be:

     Emails should be sent with a latency of no greater than 12 hours from such
     an activity. The functional requirement is describing the behavior of the
     system as it relates to the system's functionality. The non-functional
     requirement elaborates a performance characteristic of the system.

     Simply put, the difference is that non-functional requirements describe how
     the system works, while functional requirements describe what the system
     should do.

   - Example Non-functional Requirements:
    - Users must change the initially assigned login password immediately after the first successful login. Moreover, the initial should never be reused.
    - Employees never allowed to update their salary information. Such attempt should be reported to the security administrator.
    - Every unsuccessful attempt by a user to access an item of data shall be recorded on an audit trail.
    - A website should be capable enough to handle 20 million users with affecting its performance
    - The software should be portable. So moving from one OS to other OS does not create any problem.
    - Privacy of information, the export of restricted technologies, intellectual property rights, etc. should be audited.  

* User Stories
  - I want to move my units from point A to point B.
    - Features
      - Issue a move order.
      - Plot a movement route.
      - notification or visual que to indicate an illegal move or out of
        movement points.
      - Keep track of movement points and display them to the user.
      - Visual indicator that a unit has moved.
      - Visual indicator that a unit has not moved.
      - Filter units that have moved.
    - Test criteria
      1. Unit moves along the plotted route.
      2. Unit does not have any movement points.
      3. Unit does not have enough movement points to enter terrain.
      4. Indicator that notifies the player they are attempting a prohibited
         move.
  - I want to attack unit A.
  - I want to load a scenario.
  - I want to save the game.
